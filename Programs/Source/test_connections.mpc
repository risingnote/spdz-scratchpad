"""
Test receiving and sending external client inputs with updated SPDZ instructions / SPDZ Proxy.
"""

from Compiler.types import sint, regint, cfix, ClientMessageType
from Compiler.instructions import listen, acceptclientconnection
from Compiler.library import do_while, print_ln, Array

PORTNUM = 14000

sfix.set_precision(10, 41)
cfix.set_precision(10, 41)

def main():

    listen(PORTNUM)
    print_ln('Listening for client connections on base port %s', PORTNUM)

    # @do_while
    # def read_input_from_client_loop():
    client_socket_id = regint()
    acceptclientconnection(client_socket_id, PORTNUM)
    regint.read_client_public_key(client_socket_id)

    input_list = sfix.receive_from_client(2, client_socket_id, ClientMessageType.TripleShares)

    print_ln('Received input type %s value %s (%s)', type(input_list[0]), input_list[0].reveal(), input_list[0].v.reveal())

    results = Array(1, cfix)
    sresult = (input_list[0] / input_list[1])
    results[0] = sresult.reveal()

    # results = Array(1, regint)
    # results[0] = sint(23).reveal() # implicit type conversion cint -> regint

    print_ln('About to send result %s (%s)', results[0], sresult.v.reveal())
    cfix.write_to_socket(client_socket_id, results, ClientMessageType.ClearModpFix, True)

    # regint.write_to_socket(client_socket_id, results, ClientMessageType.OutputResult, True)

        # return 1

main()
